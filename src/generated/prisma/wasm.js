/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true })

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require('./runtime/index-browser.js')

const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: '6.13.0',
  engine: '361e86d0ea4987e9f53a565309b3eed797a6bcbd',
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.validator = Public.validator

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`)
}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
})

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  country: 'country',
  state: 'state',
  city: 'city',
  street: 'street',
  postalCode: 'postalCode',
  longitude: 'longitude',
  latitude: 'latitude',
  isDefault: 'isDefault',
  type: 'type',
}

exports.Prisma.AuthorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  biography: 'biography',
  birthDate: 'birthDate',
  deathDate: 'deathDate',
  photoId: 'photoId',
}

exports.Prisma.BookAuthorScalarFieldEnum = {
  bookId: 'bookId',
  authorId: 'authorId',
}

exports.Prisma.BookCategoryScalarFieldEnum = {
  bookId: 'bookId',
  categoryId: 'categoryId',
}

exports.Prisma.BookTopicScalarFieldEnum = {
  bookId: 'bookId',
  topicId: 'topicId',
}

exports.Prisma.BookTranslatorScalarFieldEnum = {
  bookId: 'bookId',
  translatorId: 'translatorId',
}

exports.Prisma.BookScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  isbn: 'isbn',
  price: 'price',
  stock: 'stock',
  pages: 'pages',
  pdfUrl: 'pdfUrl',
  format: 'format',
  publisherId: 'publisherId',
  isActive: 'isActive',
  publishYear: 'publishYear',
  printEdition: 'printEdition',
  language: 'language',
  paperType: 'paperType',
  height: 'height',
  width: 'width',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  bookId: 'bookId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentId: 'parentId',
}

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  url: 'url',
  fileName: 'fileName',
  mimeType: 'mimeType',
  size: 'size',
  uploadedAt: 'uploadedAt',
  blurDataURL: 'blurDataURL',
  thumbnailUrl: 'thumbnailUrl',
  bookId: 'bookId',
  width: 'width',
  height: 'height',
}

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  bookId: 'bookId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
}

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  totalAmount: 'totalAmount',
  addressId: 'addressId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.PublisherScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  description: 'description',
}

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bookId: 'bookId',
  rating: 'rating',
  comment: 'comment',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
}

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
}

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  transactionDate: 'transactionDate',
  amount: 'amount',
  method: 'method',
  status: 'status',
  userId: 'userId',
  reference: 'reference',
}

exports.Prisma.TranslatorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  biography: 'biography',
}

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bio: 'bio',
  avatar: 'avatar',
  avatarBlurDataURL: 'avatarBlurDataURL',
  instagram: 'instagram',
  twitter: 'twitter',
  linkedin: 'linkedin',
  city: 'city',
  country: 'country',
}

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
}

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
}

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
}
exports.BookFormat = exports.$Enums.BookFormat = {
  PHYSICAL: 'PHYSICAL',
  PDF: 'PDF',
}

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
}

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
}

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CART_TO_CART: 'CART_TO_CART',
  DIRECT_PAY: 'DIRECT_PAY',
}

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
}

exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN',
}

exports.Prisma.ModelName = {
  Address: 'Address',
  Author: 'Author',
  BookAuthor: 'BookAuthor',
  BookCategory: 'BookCategory',
  BookTopic: 'BookTopic',
  BookTranslator: 'BookTranslator',
  Book: 'Book',
  CartItem: 'CartItem',
  Cart: 'Cart',
  Category: 'Category',
  Media: 'Media',
  OrderItem: 'OrderItem',
  Order: 'Order',
  Publisher: 'Publisher',
  Review: 'Review',
  Topic: 'Topic',
  Transaction: 'Transaction',
  Translator: 'Translator',
  User: 'User',
}

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`
        } else {
          message =
            'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' +
            runtime.prettyName +
            '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      },
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
